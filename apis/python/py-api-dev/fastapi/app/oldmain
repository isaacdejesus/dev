from fastapi import FastAPI, Response, status, HTTPException
from fastapi.params import Body
from pydantic import BaseModel
from typing import Optional
from random import randrange
import psycopg2
import time
from psycopg2.extras import RealDictCursor

app = FastAPI()

#define structure of user input
#it validates user input
class Post(BaseModel):
    title: str
    content:str
    published: bool = True
    rating: Optional[int]= None

while True:

    try:
        conn = psycopg2.connect(host='localhost', database='fastapi', user='isaac', password='QQ', cursor_factory=RealDictCursor)
        cursor = conn.cursor()
        print("Connected to db")
        break
    except Exception as error:
        print("Connection failed")
        print("Error:", error)
        time.sleep(2)

my_posts = [{"title": "title of post 1", "content": "content of post 1", "id":1},
            {"title": "favorite foods", "content": "I like chile relleno", "id":2}]

def find_post(id):
    for p in my_posts:
        if p['id'] == id:
            return p

def find_index_post(id):
    for i, p in enumerate(my_posts):
        if p['id'] ==id:
            return i

@app.get('/')
def root():
    return {"message": "Hello World"}

@app.get('/posts')
def get_posts():
    return {"data": my_posts}

@app.post('/posts', status_code=status.HTTP_201_CREATED)#send 201 status code on creating of post
def create_posts(post: Post):
    post_dict = post.dict()
    post_dict['id'] = randrange(0, 1000000)
    my_posts.append(post_dict)
    return {"data": post_dict}

@app.get('/posts/{id}')
def get_post(id: int, response: Response): #cast parameter to int
    post = find_post(id)
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"post with id: {id} not found")
    return {"post_detail": post}
@app.delete('/posts/{id}',status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id: int):
    index = find_index_post(id)
    if index == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"post with id: {id} does not exist")
    my_posts.pop(index)
    return Response(status_code=status.HTTP_204_NO_CONTENT)
    #no data returned due to being 204 error 


@app.put('/posts/{id}')
def update_post(id: int, post: Post):
    index = find_index_post(id)
    if index == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"post with id: {id} does not exist")
    post_dict = post.dict()
    post_dict['id'] = id
    my_posts[index] = post_dict
    return {'data': post_dict}

#payload: dic = Body(...)-->extracts the body of post, creates 
#a dictionary with contents and stores info in payload var
#@app.post('/createposts')
#def create_posts(payload: dict = Body(...)):
#    return {"new_post": f"title {payload['title']} content: {payload['content']}"}
#def create_posts(post: Post):
#    print(post)
#    print(post.dict())##creates a dict out of input
#    return {"data":post}
















































